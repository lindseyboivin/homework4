from datetime import datetime, date

# Python program for implementation of MergeSort
# Function below taken from this source: https://www.geeksforgeeks.org/merge-sort/
def mergeSort(arr):
    if len(arr) >1:
        mid = len(arr)//2 # Finding the mid of the array
        L = arr[:mid] # Dividing the array elements 
        R = arr[mid:] # into 2 halves
 
        mergeSort(L) # Sorting the first half
        mergeSort(R) # Sorting the second half
 
        i = j = k = 0
         
        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i+= 1
            else:
                arr[k] = R[j]
                j+= 1
            k+= 1
         
        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i+= 1
            k+= 1
         
        while j < len(R):
            arr[k] = R[j]
            j+= 1
            k+= 1

# Function to do insertion sort 
# Function below taken from this source: https://www.geeksforgeeks.org/python-program-for-insertion-sort/
def insertionSort(arr): 
  
    # Traverse through 1 to len(arr) 
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key



hundredArr1 = [15,99,24,9,70,17,49,64,71,12,5,94,26,90,75,52,56,76,61,3,10,11,51,43,82,36,31,68,47,4,85,45,60,89,38,22,1,46,19,44,37,91,23,88,69,14,81,30,13,79,93,98,53,40,18,96,42,34,2,83,48,6,92,57,7,97,39,55,67,27,29,100,78,28,74,66,50,21,41,95,86,87,65,35,77,80,32,62,8,16,58,33,73,84,25,63,59,20,72,54]
hundredArr2 = [15,99,24,9,70,17,49,64,71,12,5,94,26,90,75,52,56,76,61,3,10,11,51,43,82,36,31,68,47,4,85,45,60,89,38,22,1,46,19,44,37,91,23,88,69,14,81,30,13,79,93,98,53,40,18,96,42,34,2,83,48,6,92,57,7,97,39,55,67,27,29,100,78,28,74,66,50,21,41,95,86,87,65,35,77,80,32,62,8,16,58,33,73,84,25,63,59,20,72,54]
tenArr1 = [3,9,2,1,7,5,4,10,8,6]
tenArr2 = [3,9,2,1,7,5,4,10,8,6]
oneArr1 = [1]
oneArr2 = [1]
zeroArr1 = []
zeroArr2 = []
fivehundArr1 = [75,202,154,1,192,62,296,148,43,426,155,469,247,208,143,455,461,320,462,81,493,126,277,85,260,69,211,317,287,181,292,86,257,209,178,16,283,235,146,33,153,484,101,467,136,164,271,291,427,256,471,281,14,470,415,313,321,325,199,21,299,393,142,132,200,195,160,88,358,193,464,289,201,444,138,341,79,80,53,351,241,492,15,127,227,180,41,214,177,356,215,150,481,72,361,225,190,161,264,370,297,385,219,210,486,483,428,187,205,134,34,269,229,234,332,73,340,278,239,82,213,171,107,288,255,60,365,314,441,96,386,13,300,140,109,51,401,165,338,372,212,266,258,430,410,39,298,18,319,274,369,50,104,443,331,436,442,64,25,224,425,44,52,135,439,294,404,175,388,391,251,42,5,49,7,310,54,480,453,347,280,336,245,308,184,350,448,376,230,9,379,111,446,149,362,168,394,173,166,268,94,125,496,422,152,366,293,413,222,373,417,383,405,108,382,465,322,144,352,197,78,459,32,102,23,11,220,156,346,27,495,45,273,460,117,147,272,26,172,194,364,103,349,324,113,420,67,384,474,6,112,348,128,307,76,333,402,265,377,139,141,130,174,414,122,137,226,374,158,407,93,344,354,70,477,435,452,99,323,217,395,124,476,335,456,167,326,40,123,399,151,110,259,106,231,232,189,449,475,290,357,218,403,267,330,353,450,390,371,315,318,236,87,10,355,279,98,342,240,191,312,433,416,438,411,30,252,447,253,359,282,363,114,116,169,29,84,487,368,262,276,57,59,90,434,489,494,216,196,162,473,207,309,8,254,228,89,305,185,65,157,421,488,246,129,244,419,412,249,36,118,250,345,301,242,328,337,498,17,120,389,74,468,295,66,22,55,431,457,311,176,68,47,400,95,472,408,429,204,77,4,35,20,58,303,97,238,37,121,188,179,183,63,375,479,445,119,186,71,451,105,100,497,198,304,285,367,398,159,91,19,12,423,482,360,329,275,500,466,83,499,409,131,490,56,2,261,458,92,46,378,306,115,24,380,424,334,243,397,31,437,163,61,221,396,28,406,170,48,223,145,381,343,38,3,454,339,418,485,182,440,387,206,233,286,432,133,478,237,327,248,463,302,203,263,392,316,284,270,491]
fivehundArr2 = [75,202,154,1,192,62,296,148,43,426,155,469,247,208,143,455,461,320,462,81,493,126,277,85,260,69,211,317,287,181,292,86,257,209,178,16,283,235,146,33,153,484,101,467,136,164,271,291,427,256,471,281,14,470,415,313,321,325,199,21,299,393,142,132,200,195,160,88,358,193,464,289,201,444,138,341,79,80,53,351,241,492,15,127,227,180,41,214,177,356,215,150,481,72,361,225,190,161,264,370,297,385,219,210,486,483,428,187,205,134,34,269,229,234,332,73,340,278,239,82,213,171,107,288,255,60,365,314,441,96,386,13,300,140,109,51,401,165,338,372,212,266,258,430,410,39,298,18,319,274,369,50,104,443,331,436,442,64,25,224,425,44,52,135,439,294,404,175,388,391,251,42,5,49,7,310,54,480,453,347,280,336,245,308,184,350,448,376,230,9,379,111,446,149,362,168,394,173,166,268,94,125,496,422,152,366,293,413,222,373,417,383,405,108,382,465,322,144,352,197,78,459,32,102,23,11,220,156,346,27,495,45,273,460,117,147,272,26,172,194,364,103,349,324,113,420,67,384,474,6,112,348,128,307,76,333,402,265,377,139,141,130,174,414,122,137,226,374,158,407,93,344,354,70,477,435,452,99,323,217,395,124,476,335,456,167,326,40,123,399,151,110,259,106,231,232,189,449,475,290,357,218,403,267,330,353,450,390,371,315,318,236,87,10,355,279,98,342,240,191,312,433,416,438,411,30,252,447,253,359,282,363,114,116,169,29,84,487,368,262,276,57,59,90,434,489,494,216,196,162,473,207,309,8,254,228,89,305,185,65,157,421,488,246,129,244,419,412,249,36,118,250,345,301,242,328,337,498,17,120,389,74,468,295,66,22,55,431,457,311,176,68,47,400,95,472,408,429,204,77,4,35,20,58,303,97,238,37,121,188,179,183,63,375,479,445,119,186,71,451,105,100,497,198,304,285,367,398,159,91,19,12,423,482,360,329,275,500,466,83,499,409,131,490,56,2,261,458,92,46,378,306,115,24,380,424,334,243,397,31,437,163,61,221,396,28,406,170,48,223,145,381,343,38,3,454,339,418,485,182,440,387,206,233,286,432,133,478,237,327,248,463,302,203,263,392,316,284,270,491]
thousandArr1 = [23,577,381,329,779,497,367,294,812,77,97,737,131,317,965,284,20,693,368,952,482,671,995,121,337,930,876,65,21,139,819,727,455,63,828,666,222,410,235,757,586,512,720,5,814,191,614,336,604,279,453,431,906,858,287,773,241,760,960,228,879,207,835,462,519,898,213,441,413,292,571,714,917,637,751,299,550,291,295,699,244,566,260,838,132,641,221,922,198,729,120,395,739,771,910,324,174,836,837,908,700,42,942,589,539,157,799,254,246,570,493,467,759,416,323,999,195,886,823,841,248,981,984,744,795,39,517,256,860,940,686,943,351,112,681,991,708,202,423,951,138,199,631,928,613,530,100,225,412,197,391,529,109,767,625,437,743,237,565,914,133,321,867,499,125,540,665,159,891,663,503,306,208,903,738,761,99,855,168,293,203,670,716,528,791,53,231,7,619,695,721,326,464,380,783,643,136,419,167,832,134,322,726,612,731,264,297,354,973,785,30,603,622,232,218,169,319,644,905,418,425,270,434,313,548,487,152,435,993,544,974,706,446,780,153,470,713,866,750,355,238,977,334,465,187,844,429,620,107,316,562,583,459,215,654,988,545,839,474,658,404,126,477,376,616,379,308,776,863,862,617,479,608,119,639,689,541,983,484,127,85,450,210,1,690,558,478,420,392,8,809,205,650,83,262,632,804,300,390,543,846,847,549,361,704,554,471,581,818,659,386,573,853,634,889,970,717,76,939,705,546,105,564,480,51,282,186,102,12,805,770,781,740,417,827,845,38,682,33,938,782,140,649,50,91,473,683,46,310,370,59,385,57,811,733,925,458,813,438,775,54,753,402,177,302,514,352,359,145,242,568,664,318,175,196,672,68,518,831,194,374,842,34,736,547,13,927,488,998,667,170,165,449,384,742,688,251,267,489,56,371,79,931,754,86,250,833,954,542,151,332,684,10,830,70,551,501,502,651,468,118,962,394,584,710,521,406,104,892,378,304,924,95,897,557,247,481,150,275,871,373,874,452,618,829,786,926,265,290,204,298,636,398,959,212,347,800,115,822,527,806,31,155,824,766,647,560,655,963,850,135,946,440,181,597,875,460,574,24,339,258,142,701,346,393,807,309,834,183,227,523,966,673,11,52,531,826,141,226,697,894,273,422,968,591,14,69,522,472,147,821,476,245,430,728,129,579,182,678,629,366,956,47,538,286,60,400,524,156,909,787,884,75,816,881,865,288,598,859,428,32,117,72,784,932,794,758,870,113,587,357,887,801,600,790,976,216,747,763,328,211,596,360,475,36,607,447,856,338,335,732,116,44,301,652,178,843,709,62,504,885,432,950,877,982,492,22,415,896,508,692,919,307,146,997,280,789,137,64,192,106,864,685,382,869,1000,239,907,590,803,937,890,505,595,224,160,944,555,594,553,364,513,103,94,201,19,515,274,506,656,535,978,344,303,911,725,123,915,707,408,463,490,461,74,407,92,220,872,592,230,569,454,798,41,653,158,451,674,520,679,703,985,345,702,657,161,949,58,289,96,255,722,67,516,500,825,340,648,80,719,788,409,979,537,25,572,426,947,278,206,456,640,110,817,172,261,691,45,283,980,768,154,17,219,433,921,609,901,882,439,269,582,849,561,397,941,353,111,277,961,576,510,675,185,259,769,698,320,987,971,893,696,792,78,234,486,777,933,342,73,567,101,509,642,605,712,193,3,27,483,734,796,281,189,457,6,448,532,252,888,223,249,815,989,491,755,883,511,325,534,749,271,904,748,233,621,575,311,802,214,724,268,285,857,436,26,661,559,114,163,348,868,445,48,746,536,362,669,40,388,929,330,257,190,28,916,363,55,920,638,84,494,851,495,765,88,772,162,507,176,633,358,745,61,552,935,350,266,414,272,411,403,236,35,164,209,578,913,762,369,296,840,975,533,895,389,43,305,645,314,356,764,945,588,854,15,149,148,556,424,900,526,628,180,662,923,735,263,496,878,383,349,687,730,778,333,668,443,774,615,240,630,852,184,994,646,624,377,899,873,9,124,82,372,990,37,98,593,606,243,953,610,171,200,601,466,444,130,401,955,808,602,166,2,992,179,16,49,585,427,793,580,912,485,964,623,71,29,525,66,861,217,969,680,90,752,660,711,375,312,81,469,934,810,677,128,958,902,188,89,253,4,635,331,741,442,327,341,820,918,144,957,694,986,718,421,996,715,599,143,229,93,626,948,563,498,405,315,967,387,676,972,880,756,396,276,936,627,108,848,173,87,611,343,18,723,797,122,365,399]
thousandArr2 = [23,577,381,329,779,497,367,294,812,77,97,737,131,317,965,284,20,693,368,952,482,671,995,121,337,930,876,65,21,139,819,727,455,63,828,666,222,410,235,757,586,512,720,5,814,191,614,336,604,279,453,431,906,858,287,773,241,760,960,228,879,207,835,462,519,898,213,441,413,292,571,714,917,637,751,299,550,291,295,699,244,566,260,838,132,641,221,922,198,729,120,395,739,771,910,324,174,836,837,908,700,42,942,589,539,157,799,254,246,570,493,467,759,416,323,999,195,886,823,841,248,981,984,744,795,39,517,256,860,940,686,943,351,112,681,991,708,202,423,951,138,199,631,928,613,530,100,225,412,197,391,529,109,767,625,437,743,237,565,914,133,321,867,499,125,540,665,159,891,663,503,306,208,903,738,761,99,855,168,293,203,670,716,528,791,53,231,7,619,695,721,326,464,380,783,643,136,419,167,832,134,322,726,612,731,264,297,354,973,785,30,603,622,232,218,169,319,644,905,418,425,270,434,313,548,487,152,435,993,544,974,706,446,780,153,470,713,866,750,355,238,977,334,465,187,844,429,620,107,316,562,583,459,215,654,988,545,839,474,658,404,126,477,376,616,379,308,776,863,862,617,479,608,119,639,689,541,983,484,127,85,450,210,1,690,558,478,420,392,8,809,205,650,83,262,632,804,300,390,543,846,847,549,361,704,554,471,581,818,659,386,573,853,634,889,970,717,76,939,705,546,105,564,480,51,282,186,102,12,805,770,781,740,417,827,845,38,682,33,938,782,140,649,50,91,473,683,46,310,370,59,385,57,811,733,925,458,813,438,775,54,753,402,177,302,514,352,359,145,242,568,664,318,175,196,672,68,518,831,194,374,842,34,736,547,13,927,488,998,667,170,165,449,384,742,688,251,267,489,56,371,79,931,754,86,250,833,954,542,151,332,684,10,830,70,551,501,502,651,468,118,962,394,584,710,521,406,104,892,378,304,924,95,897,557,247,481,150,275,871,373,874,452,618,829,786,926,265,290,204,298,636,398,959,212,347,800,115,822,527,806,31,155,824,766,647,560,655,963,850,135,946,440,181,597,875,460,574,24,339,258,142,701,346,393,807,309,834,183,227,523,966,673,11,52,531,826,141,226,697,894,273,422,968,591,14,69,522,472,147,821,476,245,430,728,129,579,182,678,629,366,956,47,538,286,60,400,524,156,909,787,884,75,816,881,865,288,598,859,428,32,117,72,784,932,794,758,870,113,587,357,887,801,600,790,976,216,747,763,328,211,596,360,475,36,607,447,856,338,335,732,116,44,301,652,178,843,709,62,504,885,432,950,877,982,492,22,415,896,508,692,919,307,146,997,280,789,137,64,192,106,864,685,382,869,1000,239,907,590,803,937,890,505,595,224,160,944,555,594,553,364,513,103,94,201,19,515,274,506,656,535,978,344,303,911,725,123,915,707,408,463,490,461,74,407,92,220,872,592,230,569,454,798,41,653,158,451,674,520,679,703,985,345,702,657,161,949,58,289,96,255,722,67,516,500,825,340,648,80,719,788,409,979,537,25,572,426,947,278,206,456,640,110,817,172,261,691,45,283,980,768,154,17,219,433,921,609,901,882,439,269,582,849,561,397,941,353,111,277,961,576,510,675,185,259,769,698,320,987,971,893,696,792,78,234,486,777,933,342,73,567,101,509,642,605,712,193,3,27,483,734,796,281,189,457,6,448,532,252,888,223,249,815,989,491,755,883,511,325,534,749,271,904,748,233,621,575,311,802,214,724,268,285,857,436,26,661,559,114,163,348,868,445,48,746,536,362,669,40,388,929,330,257,190,28,916,363,55,920,638,84,494,851,495,765,88,772,162,507,176,633,358,745,61,552,935,350,266,414,272,411,403,236,35,164,209,578,913,762,369,296,840,975,533,895,389,43,305,645,314,356,764,945,588,854,15,149,148,556,424,900,526,628,180,662,923,735,263,496,878,383,349,687,730,778,333,668,443,774,615,240,630,852,184,994,646,624,377,899,873,9,124,82,372,990,37,98,593,606,243,953,610,171,200,601,466,444,130,401,955,808,602,166,2,992,179,16,49,585,427,793,580,912,485,964,623,71,29,525,66,861,217,969,680,90,752,660,711,375,312,81,469,934,810,677,128,958,902,188,89,253,4,635,331,741,442,327,341,820,918,144,957,694,986,718,421,996,715,599,143,229,93,626,948,563,498,405,315,967,387,676,972,880,756,396,276,936,627,108,848,173,87,611,343,18,723,797,122,365,399]

print()

#### TESTING N = 1000 ####
# Testing merge n = 1000

beforeTime = datetime.now().time()

mergeSort(thousandArr1)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of merge sort n = 1000: ", totalTime)

# Testing insertion n = 1000

beforeTime = datetime.now().time()

insertionSort(thousandArr2)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of insertion sort n = 1000: ", totalTime)
print()

#### TESTING N = 500 ####
# Testing merge n = 500

beforeTime = datetime.now().time()

mergeSort(fivehundArr1)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of merge sort n = 500: ", totalTime)

# Testing insertion n = 500

beforeTime = datetime.now().time()

insertionSort(fivehundArr2)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of insertion sort n = 500: ", totalTime)
print()

#### TESTING N = 100 ####
# Testing merge n = 100

beforeTime = datetime.now().time()

mergeSort(hundredArr1)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of merge sort n = 100: ", totalTime)

# Testing insertion n = 100

beforeTime = datetime.now().time()

insertionSort(hundredArr2)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of insertion sort n = 100: ", totalTime)
print()

#### TESTING N = 10 ####
# Testing merge n = 10

beforeTime = datetime.now().time()

mergeSort(tenArr1)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of merge sort n = 10: ", totalTime)

# Testing insertion n = 10

beforeTime = datetime.now().time()

insertionSort(tenArr2)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of insertion sort n = 10: ", totalTime)
print()

#### TESTING N = 1 ####
# Testing merge n = 1

beforeTime = datetime.now().time()

mergeSort(oneArr1)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of merge sort n = 1: ", totalTime)

# Testing insertion n = 1

beforeTime = datetime.now().time()

insertionSort(oneArr2)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print("Duration of insertion sort n = 1: ", totalTime)
print()

#### TESTING N = 0 ####
# Testing merge n = 0

beforeTime = datetime.now().time()

mergeSort(zeroArr1)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print ("Duration of merge sort n = 0: ", totalTime)

# Testing insertion n = 0

beforeTime = datetime.now().time()

insertionSort(zeroArr2)

afterTime = datetime.now().time()

totalTime = str(datetime.combine(date.min, afterTime) - datetime.combine(date.min, beforeTime))

print("Duration of insertion sort n = 0: ", totalTime)

print()